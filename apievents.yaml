openapi: 3.0.1
info:
  title: API Events
  description: API para la gestión de eventos, usuarios, reservas, pagos y categorías de eventos.
  version: 1.0.0

tags:
  - name: users
    description: Operaciones relacionadas con los usuarios
  - name: events
    description: Operaciones relacionadas con los eventos
  - name: reservations
    description: Operaciones relacionadas con las reservas
  - name: event-categories
    description: Operaciones relacionadas con las categorías de eventos
  - name: payments
    description: Operaciones relacionadas con los pagos

servers:
  - url: 'http://localhost:8080'

paths:
  /users:
    get:
      tags:
        - users
      summary: Obtener todos los usuarios
      description: Devuelve una lista de todos los usuarios registrados.
      responses:
        '200':
          description: Lista de usuarios devuelta con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - users
      summary: Crear un nuevo usuario
      description: Registra un nuevo usuario en el sistema.
      requestBody:
        description: Detalles del nuevo usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Usuario creado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - users
      summary: Obtener un usuario por ID
      description: Devuelve un usuario específico basado en su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario
      responses:
        '200':
          description: Usuario encontrado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - users
      summary: Actualizar un usuario por ID
      description: Actualiza los detalles de un usuario específico.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario
      requestBody:
        description: Nuevos detalles del usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Usuario actualizado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - users
      summary: Eliminar un usuario por ID
      description: Elimina un usuario identificado por su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario
      responses:
        '204':
          description: Usuario eliminado con éxito (sin contenido en la respuesta)
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /events:
    get:
      tags:
        - events
      summary: Obtener todos los eventos
      description: Devuelve una lista de todos los eventos registrados.
      responses:
        '200':
          description: Lista de eventos devuelta con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - events
      summary: Crear un nuevo evento
      description: Registra un nuevo evento en el sistema.
      requestBody:
        description: Detalles del nuevo evento
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Evento creado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /events/{id}:
    get:
      tags:
        - events
      summary: Obtener un evento por ID
      description: Devuelve un evento específico basado en su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento
      responses:
        '200':
          description: Evento encontrado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - events
      summary: Actualizar un evento por ID
      description: Actualiza los detalles de un evento específico.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento
      requestBody:
        description: Nuevos detalles del evento
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Evento actualizado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - events
      summary: Eliminar un evento por ID
      description: Elimina un evento identificado por su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento
      responses:
        '204':
          description: Evento eliminado con éxito (sin contenido en la respuesta)
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /reservations:
    get:
      tags:
        - reservations
      summary: Obtener todas las reservas
      description: Devuelve una lista de todas las reservas registradas.
      responses:
        '200':
          description: Lista de reservas devuelta con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - reservations
      summary: Crear una nueva reserva
      description: Registra una nueva reserva en el sistema.
      requestBody:
        description: Detalles de la nueva reserva
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '201':
          description: Reserva creada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reservations/{id}:
    get:
      tags:
        - reservations
      summary: Obtener una reserva por ID
      description: Devuelve una reserva específica basada en su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la reserva
      responses:
        '200':
          description: Reserva encontrada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - reservations
      summary: Actualizar una reserva por ID
      description: Actualiza los detalles de una reserva específica.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la reserva
      requestBody:
        description: Nuevos detalles de la reserva
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: Reserva actualizada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - reservations
      summary: Eliminar una reserva por ID
      description: Elimina una reserva identificada por su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la reserva
      responses:
        '204':
          description: Reserva eliminada con éxito (sin contenido en la respuesta)
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /event-categories:
    get:
      tags:
        - event-categories
      summary: Obtener todas las categorías de eventos
      description: Devuelve una lista de todas las categorías de eventos registradas.
      responses:
        '200':
          description: Lista de categorías devuelta con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventCategory'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - event-categories
      summary: Crear una nueva categoría de eventos
      description: Registra una nueva categoría de eventos en el sistema.
      requestBody:
        description: Detalles de la nueva categoría de eventos
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCategory'
      responses:
        '201':
          description: Categoría creada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCategory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /event-categories/{id}:
    get:
      tags:
        - event-categories
      summary: Obtener una categoría por ID
      description: Devuelve una categoría específica basada en su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la categoría
      responses:
        '200':
          description: Categoría encontrada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCategory'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - event-categories
      summary: Actualizar una categoría por ID
      description: Actualiza los detalles de una categoría específica.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la categoría
      requestBody:
        description: Nuevos detalles de la categoría
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCategory'
      responses:
        '200':
          description: Categoría actualizada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCategory'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - event-categories
      summary: Eliminar una categoría por ID
      description: Elimina una categoría identificada por su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la categoría
      responses:
        '204':
          description: Categoría eliminada con éxito (sin contenido en la respuesta)
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /payments:
    get:
      tags:
        - payments
      summary: Obtener todos los pagos
      description: Devuelve una lista de todos los pagos registrados.
      responses:
        '200':
          description: Lista de pagos devuelta con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - payments
      summary: Crear un nuevo pago
      description: Registra un nuevo pago en el sistema.
      requestBody:
        description: Detalles del nuevo pago
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '201':
          description: Pago creado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /payments/{id}:
    get:
      tags:
        - payments
      summary: Obtener un pago por ID
      description: Devuelve un pago específico basado en su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del pago
      responses:
        '200':
          description: Pago encontrado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - payments
      summary: Actualizar un pago por ID
      description: Actualiza los detalles de un pago específico.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del pago
      requestBody:
        description: Nuevos detalles del pago
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '200':
          description: Pago actualizado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - payments
      summary: Eliminar un pago por ID
      description: Elimina un pago identificado por su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del pago
      responses:
        '204':
          description: Pago eliminado con éxito (sin contenido en la respuesta)
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: ID único del usuario
        name:
          type: string
          description: Nombre del usuario
        email:
          type: string
          description: Email del usuario
        password:
          type: string
          description: Contraseña del usuario
        creationDate:
          type: string
          format: date
          description: Fecha de creación
        active:
          type: boolean
          description: Estado del usuario
      required:
        - name
        - email
        - password
      example:
        id: 1
        name: Juan Perez
        email: juan.perez@email.com
        password: password1234
        creationDate: 2025-01-01
        active: true

    Event:
      type: object
      properties:
        id:
          type: integer
          description: ID único del evento
        eventName:
          type: string
          description: Nombre del evento
        description:
          type: string
          description: Descripcion del evento
        eventDate:
          type: string
          format: date
          description: Fecha del evento
        ubication:
          type: string
          description: Ubicación del evento
        capacity:
          type: integer
          description: Capacidad máxima del evento
        category:
          type: integer
          description: Categoría del evento
      required:
        - eventName
        - eventDate
        - ubication
        - capacity
      example:
        id: 1
        eventName: Concierto Rock
        description: A grand music festival with live performances by top artists
        eventDate: 2024-01-15
        capacity: 500
        location: Madrid, España
        category: {id: 1}

    Reservation:
      type: object
      properties:
        id:
          type: integer
          description: ID único de la reserva
        name:
          type: string
          description: Nombre del evento
        customerName:
          type: string
          description: Nombre del cliente que realizó la reserva
        email:
          type: string
          description: Email del cliente
        reservationDate:
          type: string
          format: date
          description: Fecha de la reserva
        quantity:
          type: integer
          description: Cantidad de entradas reservadas
        event:
          type: integer
          description: ID del evento asociado a la reserva
      required:
        - name
        - customerName
        - reservationDate
        - quantity
      example:
        id: 1
        name: VIP Reservation
        customerName: Maria Lopez
        email: maria@prueba.com
        reservationDate: 2024-02-10
        quantity: 3
        event: { id: 2}

    EventCategory:
      type: object
      properties:
        id:
          type: integer
          description: ID único de la categoría
        name:
          type: string
          description: Nombre de la categoría
        description:
          type: string
          description: Descripcion de la categoria
        creationDate:
          type: string
          format: date
          description: Fecha de la creacion de la categoria
        numberEvents:
          type: integer
          description: Numero de eventos
        active:
          type: boolean
          description: Indica si la categoría está activa (activa por defecto)
      required:
        - name
        - description
        - numberEvents
      example:
        id: 1
        name: Music Events
        description: Category for all music events
        creationDate: 2023-10-10
        numberEvents: 10
        active: true

    Payment:
      type: object
      properties:
        id:
          type: integer
          description: ID único del pago
        customerName:
          type: string
          description: Nombre del cliente
        paymentDate:
          type: string
          format: date
          description: Fecha del pago
        amount:
          type: number
          format: double
          description: Monto del pago
        status:
          type: string
          description: Estado del pago
        reservationId:
          type: integer
          description: ID de la reserva asociada al pago
      required:
        - amount
        - customerName
      example:
        id: 1
        customerName: Pedro Pérez
        paymentDate: 2024-01-15
        amount: 50.0
        status: Completado
        reservation: {id: 10 }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Bad Request
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Not Found
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: InternalServerError
